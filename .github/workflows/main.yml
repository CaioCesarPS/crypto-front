# Unified CI/CD Pipeline for CryptFront
# Handles: Linting, Testing, Building, and Deployment
# Single workflow file for complete automation

name: CI/CD

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: false
        default: 'staging'
        type: choice
        options:
          - production
          - staging
  schedule:
    # Run quality analysis weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

# Cancel in-progress runs for the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

jobs:
  # ============================================
  # PHASE 1: Code Quality & Validation
  # ============================================

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Check formatting
        run: |
          if [ -f .prettierrc ]; then
            npx prettier --check "**/*.{ts,tsx,js,jsx,json,css,md}"
          else
            echo "Prettier not configured, skipping"
          fi
        continue-on-error: true

  # ============================================
  # PHASE 2: Unit Tests & Coverage
  # ============================================

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:unit

      - name: Generate coverage summary
        if: always()
        run: |
          echo "## üìä Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "coverage/coverage-summary.json" ]; then
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Coverage summary file not found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Running tests without coverage or coverage file was not generated." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
            !coverage/tmp
          retention-days: 7

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Check if coverage file exists
            if (!fs.existsSync('coverage/coverage-summary.json')) {
              console.log('Coverage summary file not found, skipping PR comment');
              return;
            }

            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;

            const comment = `## üìä Test Coverage Report

            | Category | Coverage | Statements | Branches | Functions | Lines |
            |----------|----------|------------|----------|-----------|-------|
            | **Total** | **${total.lines.pct}%** | ${total.statements.pct}% | ${total.branches.pct}% | ${total.functions.pct}% | ${total.lines.pct}% |

            <details>
            <summary>View detailed coverage</summary>

            Download the full coverage report from the workflow artifacts.
            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ============================================
  # PHASE 3: Build & Security
  # ============================================

  build:
    name: Build & Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/
          retention-days: 7

  # ============================================
  # PHASE 4: Deploy (conditional)
  # ============================================

  deploy:
    name: Deploy to ${{ github.event.inputs.deploy_environment || 'production' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, test]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.deploy_environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event.inputs.deploy_environment || 'production' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build ${{ github.event.inputs.deploy_environment == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt ${{ github.event.inputs.deploy_environment == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

  # ============================================
  # PHASE 5: Quality Metrics (weekly)
  # ============================================

  quality-metrics:
    name: Quality Metrics
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.schedule == '0 3 * * 0' # Weekly schedule

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Generate dependency tree
        run: npm list --depth=0 || true

      - name: Count lines of code
        run: |
          echo "üìä Lines of Code Analysis" >> $GITHUB_STEP_SUMMARY
          echo "=========================" >> $GITHUB_STEP_SUMMARY
          find app components hooks lib -name "*.ts" -o -name "*.tsx" | xargs wc -l | tail -1 >> $GITHUB_STEP_SUMMARY

      - name: Count test files
        run: |
          echo "üìä Test Coverage Analysis" >> $GITHUB_STEP_SUMMARY
          echo "=========================" >> $GITHUB_STEP_SUMMARY
          echo "Test files:" >> $GITHUB_STEP_SUMMARY
          find tests -name "*.test.ts" -o -name "*.test.tsx" | wc -l >> $GITHUB_STEP_SUMMARY

      - name: Check bundle size
        run: |
          npm run build
          echo "üì¶ Build Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "=====================" >> $GITHUB_STEP_SUMMARY
          du -sh .next >> $GITHUB_STEP_SUMMARY
          du -sh .next/static >> $GITHUB_STEP_SUMMARY

  # ============================================
  # FINAL: Status Check (Required for branch protection)
  # ============================================

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.quality.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "‚ùå One or more required jobs failed"
            exit 1
          fi
          echo "‚úÖ All required jobs passed"
