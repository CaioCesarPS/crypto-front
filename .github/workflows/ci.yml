# Main CI/CD Pipeline for CryptFront
# Runs on pull requests and pushes to main branch
# Includes: Linting, Type Checking, Unit Tests, Build Validation

name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual trigger

# Cancel in-progress runs for the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

jobs:
  # ============================================
  # Job 1: Code Quality Checks
  # ============================================
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting (if prettier is configured)
        run: |
          if [ -f .prettierrc ]; then
            npx prettier --check "**/*.{ts,tsx,js,jsx,json,css,md}"
          else
            echo "Prettier not configured, skipping format check"
          fi
        continue-on-error: true

  # ============================================
  # Job 2: TypeScript Type Checking
  # ============================================
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

  # ============================================
  # Job 3: Unit Tests
  # ============================================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:unit

      - name: Generate coverage summary
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
            !coverage/tmp
          retention-days: 7

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;

            const comment = `## üìä Test Coverage Report

            | Category | Coverage | Statements | Branches | Functions | Lines |
            |----------|----------|------------|----------|-----------|-------|
            | **Total** | **${total.lines.pct}%** | ${total.statements.pct}% | ${total.branches.pct}% | ${total.functions.pct}% | ${total.lines.pct}% |

            <details>
            <summary>View detailed coverage</summary>

            Download the full coverage report from the workflow artifacts.
            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ============================================
  # Job 4: Build Validation
  # ============================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint, typecheck]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            !.next/cache
          retention-days: 7

  # ============================================
  # Job 5: Security Audit
  # ============================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for outdated packages
        run: npm outdated
        continue-on-error: true

  # ============================================
  # Job 6: CI Success Check
  # ============================================
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, build, security]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" ]] && \
             [[ "${{ needs.typecheck.result }}" == "success" ]] && \
             [[ "${{ needs.test.result }}" == "success" ]] && \
             [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "‚úÖ All CI checks passed successfully!"
            exit 0
          else
            echo "‚ùå One or more CI checks failed:"
            echo "  - Lint: ${{ needs.lint.result }}"
            echo "  - TypeCheck: ${{ needs.typecheck.result }}"
            echo "  - Test: ${{ needs.test.result }}"
            echo "  - Build: ${{ needs.build.result }}"
            echo "  - Security: ${{ needs.security.result }}"
            exit 1
          fi

      - name: Post success message
        if: success()
        run: echo "üéâ CI pipeline completed successfully! Ready for deployment."
