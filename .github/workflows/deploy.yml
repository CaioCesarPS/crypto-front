# Deployment Pipeline
# Deploys to production after successful CI/CD checks
# Can be triggered manually or automatically on main branch

name: Deploy

on:
  workflow_run:
    workflows: ['CI Pipeline', 'Docker Build & Push']
    types: [completed]
    branches: [main]
  workflow_dispatch: # Allow manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'

jobs:
  # ============================================
  # Deploy to Vercel (or your platform)
  # ============================================
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event.inputs.environment || 'production' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build ${{ github.event.inputs.environment == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt ${{ github.event.inputs.environment == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Post deployment comment
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `üöÄ Deployed to ${{ github.event.inputs.environment || 'production' }}: ${{ steps.deploy.outputs.url }}`
            })

  # ============================================
  # Smoke Tests After Deployment
  # ============================================
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment to be ready
        run: sleep 30

      - name: Test health endpoint
        run: |
          url="${{ needs.deploy.outputs.url || secrets.PRODUCTION_URL }}"
          response=$(curl -s -o /dev/null -w "%{http_code}" "$url/api/health")
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Health check passed (HTTP $response)"
            exit 0
          else
            echo "‚ùå Health check failed (HTTP $response)"
            exit 1
          fi

      - name: Test homepage
        run: |
          url="${{ needs.deploy.outputs.url || secrets.PRODUCTION_URL }}"
          response=$(curl -s -o /dev/null -w "%{http_code}" "$url")
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Homepage check passed (HTTP $response)"
            exit 0
          else
            echo "‚ùå Homepage check failed (HTTP $response)"
            exit 1
          fi

      - name: Notify on failure
        if: failure()
        run: echo "‚ö†Ô∏è Smoke tests failed! Deployment may have issues."

  # ============================================
  # Deployment Success Notification
  # ============================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests]
    if: always()

    steps:
      - name: Send success notification
        if: needs.deploy.result == 'success' && needs.smoke-tests.result == 'success'
        run: |
          echo "üéâ Deployment successful!"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "URL: ${{ needs.deploy.outputs.url }}"

      - name: Send failure notification
        if: needs.deploy.result == 'failure' || needs.smoke-tests.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Deploy status: ${{ needs.deploy.result }}"
          echo "Smoke tests status: ${{ needs.smoke-tests.result }}"
          exit 1
